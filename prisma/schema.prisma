generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  imageUrl      String?
  stores        Store[] 

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Store {
  id            String      @id @default(cuid())
  name          String
  userId        String
  billboards    Billboard[] @relation("StoreToBillboard")
  categories    Category[]  @relation("StoreToCategory")
  sizes         Size[]      @relation("StoreToSize")
  colors        Color[]     @relation("StoreToColor")
  products      Product[]   @relation("StoreToProduct")
  orders        Order[]     @relation("StoreToOrder")

  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Billboard {
  id            String      @id @default(cuid())
  label         String
  imageUrl      String
  storeId       String
  categories    Category[]

  store         Store       @relation("StoreToBillboard", fields: [storeId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([storeId])
}

model Category {
  id            String      @id @default(cuid())
  name          String
  storeId       String
  billboardId   String
  products      Product[]   @relation("CategoryToProduct")

  store         Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard     Billboard   @relation(fields: [billboardId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id            String      @id @default(cuid())
  name          String
  value         String
  storeId       String
  products      Product[]   @relation("SizeToProduct")

  store         Store       @relation("StoreToSize", fields: [storeId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([storeId])
}

model Color  {
  id            String      @id @default(cuid())
  name          String
  value         String
  storeId       String
  products      Product[]   @relation("ColorToProduct")

  store         Store       @relation("StoreToColor", fields: [storeId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([storeId])
}

model Product {
  id            String      @id @default(cuid())
  name          String
  price         Decimal
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  storeId       String
  categoryId    String
  sizeId        String
  colorId       String
  images        Image[]
  orderItems    OrderItem[]

  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size          Size        @relation("SizeToProduct", fields: [sizeId], references: [id])
  color         Color       @relation("ColorToProduct", fields: [colorId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([storeId])
}

model Image {
  id            String      @id @default(cuid())
  url           String
  productId     String

  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([productId])
}

model Order {
  id            String      @id @default(uuid())
  storeId       String
  orderItems    OrderItem[]
  isPaid        Boolean     @default(false)
  phone         String       @default("")
  address       String      @default("")

  store         Store       @relation("StoreToOrder", fields: [storeId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id            String      @id @default(uuid())
  orderId       String
  productId     String

  order        Order       @relation(fields: [orderId], references: [id])
  product      Product     @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}